#!/usr/bin/env python3
import time
import json
import paho.mqtt.client as mqtt
import board
import neopixel
import subprocess
import logging
from threading import Lock

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("plc_mqtt_neopixel.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# NeoPixel strip configuration
PIXEL_PIN = board.D18  # GPIO pin connected to the NeoPixels
NUM_PIXELS = 15  # Number of NeoPixels
ORDER = neopixel.GRB  # NeoPixel color order

# MQTT configuration
MQTT_BROKER = "localhost"  # Change if broker is on another device
MQTT_PORT = 1883
MQTT_TOPIC = "neopixels/control"

# Default values
DEFAULT_BRIGHTNESS = 0.5  # 50% brightness
DEFAULT_COLOR = (255, 255, 255)  # White
DEFAULT_STATE = False  # Off by default

# Initialize the NeoPixel strip
pixels = neopixel.NeoPixel(
    PIXEL_PIN,
    NUM_PIXELS,
    brightness=DEFAULT_BRIGHTNESS,
    auto_write=False,
    pixel_order=ORDER
)

# Lock for thread-safe pixel updates
pixel_lock = Lock()

def initialize_plc_network():
    """Initialize the OpenPLC powerline communication network"""
    logger.info("Initializing PLC network...")
    
    try:
        # Get PLC device info (adjust command based on your OpenPLC Utils installation)
        result = subprocess.run(
            ["plclist"], 
            capture_output=True, 
            text=True, 
            check=True
        )
        logger.info(f"PLC devices: {result.stdout.strip()}")
        
        # Configure PLC interface (modify parameters according to your network)
        # Note: These commands should be adjusted based on the specific OpenPLC 
        # utilities commands and parameters for your setup
        subprocess.run(
            ["plcconfig", "--set-network", "HomePlug", "--start"], 
            check=True
        )
        
        logger.info("PLC network initialized successfully")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to initialize PLC network: {e}")
        logger.error(f"Error output: {e.stderr}")
        return False

def update_pixels(state=None, brightness=None, color=None):
    """Update the NeoPixel strip based on provided parameters"""
    with pixel_lock:
        current_color = pixels[0] if pixels[0] != (0, 0, 0) else DEFAULT_COLOR
        
        # Update brightness if provided
        if brightness is not None and 0 <= brightness <= 1:
            pixels.brightness = brightness
            logger.info(f"Brightness set to {brightness*100}%")
        
        # Update color if provided
        if color is not None:
            current_color = color
            logger.info(f"Color set to RGB{color}")
        
        # Update state if provided
        if state is not None:
            if state:
                # Turn on with current settings
                for i in range(NUM_PIXELS):
                    pixels[i] = current_color
                logger.info("Turned ON")
            else:
                # Turn off (set all pixels to black)
                for i in range(NUM_PIXELS):
                    pixels[i] = (0, 0, 0)
                logger.info("Turned OFF")
        
        # If no state provided but color changed, make sure LEDs are showing the color
        elif color is not None and pixels[0] == (0, 0, 0):
            for i in range(NUM_PIXELS):
                pixels[i] = color
        
        # Apply changes
        pixels.show()

def on_connect(client, userdata, flags, rc):
    """Callback for when the client connects to the MQTT broker"""
    logger.info(f"Connected to MQTT broker with result code {rc}")
    client.subscribe(MQTT_TOPIC)
    logger.info(f"Subscribed to topic: {MQTT_TOPIC}")

def on_message(client, userdata, msg):
    """Callback for when a message is received from the MQTT broker"""
    try:
        logger.info(f"Received message: {msg.payload.decode()}")
        payload = json.loads(msg.payload.decode())
        
        # Extract parameters from payload
        state = payload.get("state")  # "on" or "off"
        brightness = payload.get("brightness")  # 0.0 to 1.0
        color = payload.get("color")  # [R, G, B] where each is 0-255
        
        # Convert state string to boolean if present
        if state is not None:
            state = state.lower() == "on"
        
        # Convert color array to tuple if present
        if color is not None:
            color = tuple(color)
        
        # Update the NeoPixels
        update_pixels(state, brightness, color)
        
    except json.JSONDecodeError:
        logger.error("Failed to parse JSON message")
    except Exception as e:
        logger.error(f"Error handling message: {e}")

def main():
    """Main function to set up and run the program"""
    logger.info("Starting PLC MQTT NeoPixel Controller")
    
    # Initialize the PLC network
    if not initialize_plc_network():
        logger.error("Failed to initialize PLC network. Exiting.")
        return
    
    # Initialize MQTT client
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    
    # Connect to MQTT broker
    try:
        logger.info(f"Connecting to MQTT broker at {MQTT_BROKER}:{MQTT_PORT}")
        client.connect(MQTT_BROKER, MQTT_PORT, 60)
    except Exception as e:
        logger.error(f"Failed to connect to MQTT broker: {e}")
        return
    
    # Turn off all pixels initially
    update_pixels(state=DEFAULT_STATE)
    
    # Start the MQTT loop
    logger.info("Starting MQTT loop")
    client.loop_forever()

if __name__ == "__main__":
    main()
